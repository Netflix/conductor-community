buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:7.0.0'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.6.7'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.+'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'application'
    id 'jacoco'
    id 'nebula.netflixoss' version '10.6.0'
    id 'org.sonarqube' version '3.1.1'
}

// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name

subprojects {
    tasks.withType(Javadoc).all { enabled = false }
}

apply from: "$rootDir/dependencies.gradle"

allprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'project-report'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    group = 'com.netflix.conductor'

    configurations.all {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    repositories {
        mavenCentral()

        // oss-candidate for -rc.* verions:
        maven {
            url "https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates"
        }

        /**
         * This repository locates artifacts that don't exist in maven central but we had to backup from jcenter
         * The exclusiveContent
         */
        exclusiveContent {
            forRepository {
                maven {
                    url "https://artifactory-oss.prod.netflix.net/artifactory/required-jcenter-modules-backup"
                }
            }
            filter {
                includeGroupByRegex "com\\.github\\.vmg.*"
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:3.1.0")
        }
    }

    dependencies {
        implementation "org.apache.logging.log4j:log4j-core:${revLog4J}"
        implementation "org.apache.logging.log4j:log4j-api:${revLog4J}"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:${revLog4J}"
        implementation "org.apache.logging.log4j:log4j-jul:${revLog4J}"
        implementation "org.apache.logging.log4j:log4j-web:${revLog4J}"

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-starter-log4j2'
        testImplementation 'org.junit.vintage:junit-vintage-engine'
    }

    // processes additional configuration metadata json file as described here
    // https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-configuration-metadata.html#configuration-metadata-additional-metadata
    compileJava.inputs.files(processResources)

    test {
        useJUnitPlatform()
        testLogging {
            events = ["SKIPPED", "FAILED"]
            exceptionFormat = "full"
            showStandardStreams = false
        }
    }

}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "com.netflix.conductor:conductor"
        property "sonar.organization", "netflix"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

configure(allprojects) {

    apply plugin: 'com.diffplug.spotless'

    spotless {
        java {
            googleJavaFormat().aosp()
            removeUnusedImports()
            importOrder('java', 'javax', 'org', 'com.netflix', '', '\\#com.netflix', '\\#')
            licenseHeaderFile("$rootDir/licenseheader.txt")
        }
    }
    build.dependsOn(spotlessApply)
}